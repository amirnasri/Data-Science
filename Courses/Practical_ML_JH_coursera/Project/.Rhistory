swirl()
5+7
x<- 5+7
swirl(
)
x
y = x - 3
y <- x-3
y
c(1.1, 9. 3.14)
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x<- 9
ls()
list.files()
?list.files
arts(list.files)
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
x
fs
nxt()
ls(file
)
play()
ls(file)
nxt()
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
old.dir
setwd(old.dir)
class(flag)
class(flags)
head(flags)
dim(flags)
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
class(sapply(flag_colors, sum))
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
flag_shapes
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
lapply(flags, unique)
unique_vals <-lapply(flags, unique)
uninstall_all_courses()
unique_vals
sapply(unique, unique)
sapply(unique_vals, length)
class(sapply(unique_vals, length))
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data("iris")
?iris
iris$Sepal.Length
class(iris)
iris$Sepal.Length
iris$Sepal.Length
ls(iris)
mean(iris$Sepal.Length)
iris[, 1:4]
ls(iris[, 1:4])
lapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
x <- matrix(2, 3, 4)
x
x <- matrix(2, 3, 4, 5)
x
rnorm
rnorm(2, 3, 4)
rnorm((2, 3, 4))
?rnorm
rnorm
rnorm(10)
rnorm(10 ,3,4)
ones
one
?matrix
array(2, 3, 4)
array(1:12, c(2, 3, 4))
x<-array(1:12, c(2, 3, 4))
x
sum(x, axis=1
)
apply(x, 2, mean)
apply(x, 1, mean)
dim(x)
?apply
apply(x, , mean)
apply(x, 2, mean)
apply(x, 3, mean)
apply(x, c(2, 3), mean)
x1<-array(1:12, c(2, 3))
x1
apply(x, c(2, 3), mean)
apply(x1, c(2, 3), mean)
apply(x1, 1, mean)
x1
apply(x, 1, mean)
apply(x1, 2, mean)
apply(iris[, 1:4], 1, mean)
iris[,1:4]
apply(iris[, 1:4], 2, mean)
data("mtcars")
tapply(mtcars$cyl, mtcars$mpg, mean)
?tapply
with(mtcars, tapply(mpg, cyl, mean))
tapply(cyl, mpg, mean)
tapply(mpg, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
dim(mtcars)
dim(tapply(mpg, cyl, mean))
tapply(cyl, mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
dim(tapply(mtcars$cyl, mtcars$mpg, mean)
)
mtcars
?mtcars
mtcars$mpg * mtcars$cyl
mean(mtcars$mpg * mtcars$cyl)
length(mtcars$mpg * mtcars$cyl)
dim(mtcars)
append()
apply(mtcars2, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars
?mtcars
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(history))
ls(mtcars)
with(mtcars, tapply(hp, cyl))
tapply(mtcars$hp, mtcars$cyl)
mtcars$cyl
split(mtcars$hp, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
209.21429 - 82.63636
debug(ls)
x
ls
ls()
q
irivirginica
iris
delete ls
?debug
undebug(ls)
qt(.975, 9)
qt(.975, 18)
sq = ((9 * .68 + 9 * .6)/18)^.5
sq
sp = ((9 * .68 + 9 * .6)/18)^.5
-2 + c(-1, 1) * sp * qt(.975, 18) * (1/9 +1/9)^.5
-2 + c(-1, 1) * sp * qt(.975, 9) * (1/9 +1/9)^.5
-2 + c(-1, 1) * sp * qt(.975, 18) * (1/9 +1/9)^.5
t.test
library(swirl)
install_from_swirl("Regression Models")
swirl
swirl()
child
parent
plot
plot(child ~ parent, galton)
plot(jitter(child, 1) ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
regrline = lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
plot(fit$residuals)
mean(fit$residuals)
mean(fit$residuals^2)
?
/
mean(fit$residuals^2)^.5
summary(fit)
sum(fit$residuals)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
q
quit
quit()
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
length(train_pred)
length(train$classe)
length(test_pred)
?train
trainControl(method="cv")
?train
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
backtrace
traceback()
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
clf
train_cm
test_pred
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
clf
length(cols_total)
cols_total
train_pred
?createDataPartition
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
colnames([which(cols_total != "classe")])
colnames(train[which(cols_total != "classe")])
colnames(test)
train_pred = predict(clf, train)
test_pred = predict(clf, test)
clf
colnames(train[which(cols_total != "classe")]) == colnames(test)
clf$finalModel
test_pred = predict(clf, test)
cat.new
object$forest$ncat
all(object$forest$ncat == cat.new)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred = predict(clf, test)
cat.new
backtrace()
test_pred = predict(clf, test)
backtrace()
traceback()
test_pred = predict(clf, test)
all(object$forest$ncat == cat.new)
test_pred = predict(clf, test)
cat.new
all(object$forest$ncat == cat.new)
object$forest$ncat == cat.new
colnames(test)
colnames(train[which(cols_total != "classe")])
test
colnames(test)
clf
object$forest$ncat == cat.new
sapply(test, class)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
sapply(test, class) ==
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
train
colnames(train)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
dim(train)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
inTrain
dim(train_rm_na)
dim(train)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
train
factor(train$classe)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
?sample
train$classe
summary(train$classe)
summary(train_rm_na$classe)
mtcars
mtcars[:10,]
mtcars[:10]
mtcars[1:10]
mtcars[1:10,]
sample(mtcars[1:10,], 10)
permutations
library(gtools)
x <- 1:12
sample(x)
x
sample(1:10)
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
sample(1:10)
sample(1:10)
sample(1:10)
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:10)]
mtcars[sample(1:3)]
mtcars[sample(1:3),]
mtcars[sample(1:3),]
mtcars[sample(1:3),]
mtcars[sample(1:3),]
sample(1:3)
sample(1:3)
sample(1:3)
sample(1:3)
sample(1:3)
mtcars[sample(1:10),]
mtcars[sample(1:10),]
mtcars[sample(1:10),]
mtcars[sample(1:10),]
mtcars[sample(1:10),]
dim(train_rm_na)
dim(train_rm_na)[0]
dim(train_rm_na)[1]
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
pred_test
test_pred
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
?train
total_cols
cols_total
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
clf$modelInfo
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
head(train)
head(test)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
head(test)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
traceback()
predict(clf, test)
object$forest$ncat == cat.new
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
train_cm
validation_cm
test_pred
validation_set$classe
colnames(train_set[which(cols_total != "classe")])
head(test)
test = testing[cols_total[which(cols_total != "classe")]]
head(test)
varImp(clf)
colnames(test)
testing
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
train_cm
validation_cm
varImp(clf)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
test_pred
zip
zip(test_pred, test_pred)
zip(test_pred, test_pred)
data.frame(c(1:20), test_pred)
data.frame(test_pred)
head(training[1:5,])
head(training[,1:5])
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
test_pred
test[,1:5]
test[,1:5m]
test[,1:5,]
varImp(clf)
train_rm_na$classe
train_rm_na$X
library(doMC)
library(caret)
library(gbm)
registerDoMC(cores = 3)
setwd('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/')
training = read.csv('pml-training.csv')
testing = read.csv('pml-testing.csv')
train_rm_na = training[, colSums(is.na(training)) == 0]
factor_cols = colnames(train_rm_na)[sapply(train_rm_na, class) == 'factor']
non_factor_cols = colnames(train_rm_na)[sapply(train_rm_na, class) != 'factor']
cols = character(0)
for (c in factor_cols) {
x = summary(train_rm_na[,c])
if (class(names(x)[1]) != "character" || names(x)[1] != '')
cols = c(cols, c)
}
cols_total = c(cols, non_factor_cols)
#cols_total = c("X",   "cvtd_timestamp",              "classe" )
cols_total = cols_total[which((cols_total != "-") & (cols_total != "cvtd_timestamp") & (cols_total != "new_window"))]
train_rm_na$classe
plot(train_rm_na$classe)
plot(train_rm_na$X, train_rm_na$classe)
clf
clf$finalModel
clf
train_cm
varImp(clf)
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
source('~/Dropbox/Courses/Practical_ML_JH_coursera/Project/project.R')
varImp(clf)
?varImp
imp = varImp(clf)
class(imp)
imp$importance
imp$importance
sort(imp$importance)
sort(imp$importance)
class(imp$importance)
imp$importance$sort
df = imp$importance
df
df$Overall
colnames(df)
sort(df)
sort(df, 1)
?sort
order(imp$importance)
imp[order(imp$importance),]
imp[order(imp$importance),1]
imp[order(imp$importance)]
imp[order(imp$importance),1]
imp[order(imp$importance),1]
df
df[order(df$Overall),1]
df[order(df$Overall),]
df
df[order(df$Overall)]
df[order(df$Overall),]
df
df[order(df$Overall),]
df[order(df$Overall),]
attributes(df)
order(df$Overall),]
df$row.names
df$row.names
get_all_vars()
get
attr(df, 'f')
attr(df, 'row.names')
attr(df, 'row.names')[order(df$Overall)]
df
imp
imp
plot(imp)
